import { GoogleGenAI } from '@google/genai';

const apiKey = import.meta.env.VITE_GEMINI_API_KEY;

if (!apiKey) {
  console.warn('‚ö†Ô∏è VITE_GEMINI_API_KEY n√£o encontrada. IA de aprova√ß√£o desabilitada.');
}

// Novo SDK: GoogleGenAI (n√£o precisa passar a key se estiver em GEMINI_API_KEY)
const ai = apiKey ? new GoogleGenAI({ apiKey }) : null;

interface SupporterData {
  displayName: string;
  email: string;
  phone: string;
  motivation: string;
  causes: string;
}

interface AnalysisResult {
  decision: 'APPROVE' | 'REVIEW' | 'REJECT';
  reason: string;
}

/**
 * Analisa cadastro de apoiadora usando Gemini AI
 * Timeout de 8s para evitar travamento no iOS/Safari
 */
export async function analyzeSupporterProfile(data: SupporterData): Promise<AnalysisResult> {
  // Se n√£o tiver API key, sempre retorna REVIEW (revis√£o manual)
  if (!ai) {
    return {
      decision: 'REVIEW',
      reason: 'IA n√£o configurada - revis√£o manual necess√°ria'
    };
  }

  try {
    // AbortController para timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 segundos

    const prompt = `
Voc√™ √© um sistema de an√°lise de cadastros para uma plataforma de apoio a mulheres v√≠timas de viol√™ncia.

Analise este cadastro de apoiadora e determine se ela deve ser:
- APPROVE: Aprovada automaticamente (perfil genu√≠no e qualificado)
- REVIEW: Precisa revis√£o manual (d√∫vidas ou informa√ß√µes insuficientes)
- REJECT: Rejeitada automaticamente (spam, bot ou perfil suspeito)

DADOS DO CADASTRO:
Nome: ${data.displayName}
Email: ${data.email}
Telefone: ${data.phone}
Motiva√ß√£o: ${data.motivation}
Causas que defende: ${data.causes}

CRIT√âRIOS DE APROVA√á√ÉO:
‚úÖ APPROVE se:
- Motiva√ß√£o clara, bem escrita e genu√≠na
- Menciona experi√™ncia, forma√ß√£o ou vontade de ajudar
- Email v√°lido (dom√≠nios reais como gmail, hotmail, outlook, etc)
- Causas relacionadas ao tema (viol√™ncia, direitos, psicologia, etc)
- Texto coerente e sem erros grosseiros

‚è≥ REVIEW se:
- Motiva√ß√£o muito curta ou gen√©rica
- D√∫vidas sobre autenticidade
- Informa√ß√µes incompletas ou vagas
- Precisa valida√ß√£o adicional

‚ùå REJECT se:
- Spam √≥bvio ou texto sem sentido
- Bot detectado
- Email tempor√°rio ou suspeito
- Conte√∫do inapropriado
- Claramente n√£o √© uma pessoa real

RESPONDA APENAS NO FORMATO:
DECIS√ÉO: [APPROVE/REVIEW/REJECT]
RAZ√ÉO: [Uma frase curta explicando]

Exemplo:
DECIS√ÉO: APPROVE
RAZ√ÉO: Psic√≥loga com experi√™ncia clara e motiva√ß√£o genu√≠na
`;

    // Nova API do Gemini 2.5 Flash
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
    });

    clearTimeout(timeoutId); // Limpar timeout ap√≥s resposta bem-sucedida

    const responseText = response.text;

    console.log('ü§ñ Resposta Gemini:', responseText);

    // Parse da resposta
    const decisionMatch = responseText.match(/DECIS√ÉO:\s*(APPROVE|REVIEW|REJECT)/i);
    const reasonMatch = responseText.match(/RAZ√ÉO:\s*(.+)/i);

    if (!decisionMatch) {
      return {
        decision: 'REVIEW',
        reason: 'Erro ao analisar resposta da IA'
      };
    }

    return {
      decision: decisionMatch[1].toUpperCase() as 'APPROVE' | 'REVIEW' | 'REJECT',
      reason: reasonMatch?.[1]?.trim() || 'An√°lise conclu√≠da'
    };

  } catch (error: any) {
    console.error('‚ùå Erro ao analisar com Gemini:', error);
    
    // Se for timeout/abort, retornar REVIEW com mensagem espec√≠fica
    if (error.name === 'AbortError' || error.message?.includes('abort')) {
      console.warn('‚è±Ô∏è Timeout na an√°lise IA - retornando REVIEW');
      return {
        decision: 'REVIEW',
        reason: 'Timeout na an√°lise - revis√£o manual necess√°ria'
      };
    }
    
    return {
      decision: 'REVIEW',
      reason: 'Erro na an√°lise - revis√£o manual necess√°ria'
    };
  }
}
